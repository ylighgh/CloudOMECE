=== Docker仓库的使用

.规划节点
[cols="10,11,12", options="规划节点"] 
|===
|IP地址 |主机名 |节点

|10.18.4.30
|master
|Docker主节点

|10.18.4.36
|slave
|Docker客户端

|===

.基础安装
按照教程Docker引擎的安装将两个节点都安装上docker-ce

.构建私有仓库
[source.bash]
----
#在master节点上执行
./images.sh
docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:latest
----

.查看运行情况
----
[root@master ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
21e94458ed35        registry:latest     "/entrypoint.sh /etc…"   44 seconds ago      Up 40 seconds       0.0.0.0:5000->5000/tcp   registry
----

.查看状态
Registry容器启动后，打开浏览器输入http://10.18.4.30:5000/v2/，如查看到如下图所示情况，说明Registry运行正常

image::docker_04.png[]

.上传镜像(在master节点执行)
[source.bash]
----
#配置私有仓库
cat << EOF > /etc/docker/daemon.json
{
    "insecure-registries":["10.18.4.30:5000"]
}
EOF

systemctl restart docker

#使用docker tag命令将centos：latest这个镜像标记为10.18.4.30:500/centos:latest
docker tag centos:latest 10.18.4.30:5000/centos:latest

#使用dokcer push上传标记的镜像
docker push 10.18.4.30:5000/centos:latest

----

.查看仓库中的镜像
----
[root@master ~]# curl -L http://10.18.4.30:5000/v2/_catalog
{"repositories":["centos"]}

如同上述代码所示，提示{"repositories":["centos"]}，则表明镜像已经上传成功
----

.拉取镜像(在slave节点执行)
[source.bash]
----
#配置私有仓库
cat << EOF > /etc/docker/daemon.json
{
    "insecure-registries":["10.18.4.30:5000"]
}
EOF

systemctl restart docker

#拉取镜像
docker pull 10.18.4.30:5000/centos:latest
----

.查看拉取结果(在slave节点执行)
----

[root@slave ~]# docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
10.18.4.30:5000/centos   latest              0f3e07c0138f        8 months ago        220MB

----

