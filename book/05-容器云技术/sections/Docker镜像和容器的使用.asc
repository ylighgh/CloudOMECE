=== Docker镜像和容器的使用

.规划节点
[cols="10,11,12", options="规划节点"] 
|===
|IP地址 |主机名 |节点

|10.18.4.30
|master
|Docker节点

|===

==== 镜像的基本管理和使用

.查看镜像列表
----
[root@master ~]# ./image.sh
[root@master ~]# docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
httpd                    latest              d3017f59d5e2        7 months ago        165MB
busybox                  latest              020584afccce        7 months ago        1.22MB
nginx                    latest              540a289bab6c        7 months ago        126MB
redis                    alpine              6f63d037b592        7 months ago        29.3MB
python                   3.7-alpine          b11d2a09763f        7 months ago        98.8MB
10.18.4.30:5000/centos   latest              0f3e07c0138f        8 months ago        220MB
centos                   latest              0f3e07c0138f        8 months ago        220MB
registry                 latest              f32a97de94e1        15 months ago       25.8MB
swarm                    latest              ff454b4a0e84        24 months ago       12.7MB
httpd                    2.2.32              c51e86ea30d1        2 years ago         171MB
httpd                    2.2.31              c8a7fb36e3ab        3 years ago         170MB
----
*参数说明*

* REPOSITORY：表示镜像的仓库源
* TAG：镜像的标签
* IMAGE ID：镜像ID
* CREATED：镜像创建时间
* SIZE：镜像大小

TIP: 同一个仓库源可以有多个TAG，代表这个仓库源的不同个版本。例如http仓库源里面有2.2.32和2.2.31等多个不同版本，可以使用REPOSITORY:TAG 命令来定义不同的镜像

例：要使用版本为2.2.31的httpd镜像来运行容器，命令如下：
[source,bash]
----
docker run -i -t -d httpd:2.2.31 /bin/bash
----
*参数说明*

* -i：交互式操作
* -t：终端
* -d：后台运行
* httpd:2.2.31：镜像名，使用httpd:2.2.31镜像为基础来启动容器
* /bin/bash：容器交互式shell

如果要使用版本为2.2.32的httpd镜像来运行容器，命令如下：
[source,bash]
----
docker run -i -t -d httpd:2.2.32 /bin/bash
----

如果不指定镜像的版本标签，则默认使用latest标签的镜像

.获取镜像
[source,bash]
----
docker pull [OPTIONS]NAME[:TAG|@DIGEST]
----
*OPTIONS说明*

* -a：拉取所有tagged镜像
* --disable-content-trust：忽略镜像的校验，默认开启

.查找镜像
[source,bash]
----
docker search [OPTIONS]TERM
----
*OPTIONS说明*

* --automated：只列出automated build类型的镜像
* --no-ture：显示完整的镜像描述
* --filter=stars：列出收藏数不下搜于指定值的镜像

例：需要一个httpd镜像作为Web服务时，可以使用docker search命令搜索httpd来寻找合适的镜像
[source,bash]
----
docker search --filter=stars=10 httpd
----
image::docker_05.png[]
*参数说明*

* NAME：镜像仓库源的名称
* DESCRIPTION：镜像的描述
* OFFICIAL:是否是Docker官方发布
* stars：类似GitHub里面的star，表示点赞、喜欢的意思
* AUTOMATED：自动构建

.删除镜像
[source,bash]
----
docker rmi [OPTIONS]IAMGE[IAMGE...]
----
*OPTIONS说明*

* -f：强制删除
* --no-ture：不移除该镜像的过程镜像，默认移除

例：强制删除本地镜像busybox
[source,bash]
----
docker rmi -f busybox:latest
----

==== 容器的基本管理和使用

.运行容器
[source,bash]
----
docker run -it --rm -d -p 80:80 nginx:latest
----
*参数说明*

*参数说明*

* -i：交互式操作
* -t：终端
* -rm：容器退出后随之将其删除，可以避免浪费空间
* -p：端口映射
* -d：容器在后台运行

启动之后在浏览器里输入http://10.18.4.30

image::docker_06.png[]


.容器语法
[source,bash]
----
#启动容器
docker start [CONTAINER ID]

#启动所有的容器
docker start $(docker ps -aq)

#列出运行中的容器
docker ps
docker container ls

#列出所有容器（包含终止状态）
docker ps -a

#查看具体容器的信息
docker inspect [container ID or NAMES]

#查看容器的使用资源状况
docker stats [container ID or NAMES]

#查看容器日志
docker logs [OPTIONS][container ID or NAMES]
OPTIONS说明:
● --details: 显示更多的信息
● -followv:跟踪实时日志
● --sincestring:显示自某个timestamp之后的日志，或相对时间，如42分钟
● -ailstring:从日志末尾显示多少行日志，默认是all.
● -t,--timestamps:显示时间戳
● --until string:显示自某个timestamp之前的日志，或相对时间，如42分钟

#进入容器
docker exec -it [CONTAINER ID] bash

#进入容器后，退出容器命令
exit 或者 Ctrl+C ：退出并且终止容器运行
Ctrl+P+Q：退出不终止容器运行

#删除终止状态的容器
docker rm [CONTAINER ID]

#删除所有处于终止状态的容器
docker container prune

#删除未被使用的数据卷
docker volume prune

#删除运行中的容器
docker rm -f [CONTAINER ID]

#批量停止所有的容器
docker stop $(docker ps -qa)

#批量删除所有的容器
docker rm $(docker ps -qa)

#终止容器进程，容器进入终止状态
docker container stop [CONTAINER ID]

#导入/导出容器
将容器快照导出为本地文件,语法如下：
docker export [CONTAINER ID]> [tar file]

将容器快照文件导入为镜像，语法如下：
cat [tar file]|docker import -[name:tag]
----

----
例：将容器快照导出为本地文件
[root@master ylighgh]# docker export bcd615097535 > nginx.tar
[root@master ylighgh]# ll
total 125320
-rw-r--r-- 1 root root 128325632 Jun  1 07:53 nginx.tar

例：将容器快照文件导入为镜像
[root@master ylighgh]# cat nginx.tar | docker import - nginx:ylighgh
sha256:4454f40b959e5527fea2a048f4a54143676a031a1dfe53e92220d68f07ff1df3
[root@master ylighgh]# docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
nginx                    ylighgh             4454f40b959e        10 seconds ago      127M
----
IMPORTANT: 使用docker import命令导入一个容器快照到本地镜像库时，将丢弃所有的历史记录和元数据信息，即仅保存容器当前的快照状态

==== 构建自定义镜像

.docker commit
[source,bash]
----
#docker commit 命令用于从容器创建一个新的镜像，其语法如下:
docker commit [ OPTIONS] CONTAINET [REPOSITORY[:TAG]]

OPTIONS说明:
● -a: 提交的镜像作者
● -c:使用Dockerfile指令来创建镜像
● -m:提交时的说明文字
● -p:在commit时，将容器暂停

----

查看正在运行的容器: `docker ps`

image::docker_07.png[]

将容器bcd615097535保存为新的镜像，并添加提交人和说明信息
[source,bash]
----
docker commit -a "xiandian" -m "nginx-test" bcd615097535 nginx:v1
----

构建完成查看构建结果
----
[root@master ~]# docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
nginx                    v1                  8ff76a263202        5 seconds ago       126MB
----

.Dokcerfile
[source,bash]
----
#Dockerfile主要指令如下：
● FROM: 指定基础镜像，必须为第一个命令
● MAINTAINER: 维护者信息
● RUN: 构建镜像时执行的命令
● ADD: 将本地文件添加到容器中，tar类型文件会自动解压（网络压缩资源不会被解压），可以访问网络资源，类似于wget
● COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源 
● CMD：构建容器后调用，也就是在容器启动时才进行调用
● ENTRYPOINT: 配置容器，使其可执行化。配合CMD可省去 "application" ，只使用参数 
● LABEL: 用于为镜像添加元数据
● ENV: 设置环境变量
● EXPOSE: 指定与外界交互的端口
● VOLUME: 用于指定持久化目录
● WORKDIR: 工作目录，类似于cd命令
● USER: 指定运行容器时的用户名或者UID，后续的RUN也会使用指定用户。使用USER指定用户时，可以使用用户名，UID或者GID，或者是两者的结合。当然服务不需要管理员权限时，可通过该命令指定进行用户
● ARG: 用于指定传递给构建运行时的变量
● ONBUILD: 用于设置镜像触发器
----

*例：以centos:latest为基础镜像，安装jdk1.8并构建新的镜像centos-jdk*
[source,bash]
----
#新建文件夹用于存放JDK安装包和Dockfile文件(/root/目录下执行命令)
mkdir centos-jdk
mv jdk/jdk-8u141-linux-x64.tar.gz ./centos-jdk/
cd /root/centos-jdk/

#编写Dockerfile
cat << EOF > /root/centos-jdk/Dockerfile
#CentOS with JDK8
#Author ylighgh
#指定镜像
FROM centos
#指定作者
MAINTAINER ylighgh
#新建文件夹用于存放jdk文件
RUN mkdir /usr/local/java
#将JDK文件复制到镜像内并自动解压
ADD jdk-8u141-linux-x64.tar.gz /usr/local/java/
#创建软连接
RUN ln -s /usr/local/java/jdk1.8.0_141 /usr/local/java/jdk
#设置环境变量
ENV JAVA_HOME /usr/local/java/jdk
ENV JRE_HOME \${JAVA_HOME}/jre
ENV CLASSPATH .:\${JAVA_HOME}/lib:\${JRE_HOME}/lib
ENV PATH \${JAVA_HOME}/bin:\$PATH
EOF
----

.使用docker build命令构建新镜像
----
[root@master centos-jdk]# docker build -t="centos-jdk" .
Sending build context to Docker daemon  185.5MB
Step 1/9 : FROM centos
 ---> 0f3e07c0138f
Step 2/9 : MAINTAINER ylighgh
 ---> Using cache
 ---> 026a0b7c87bc
Step 3/9 : RUN mkdir /usr/local/java
 ---> Using cache
 ---> fde8082fcb8a
Step 4/9 : ADD jdk-8u141-linux-x64.tar.gz /usr/local/java/
 ---> Using cache
 ---> bf1877385a0e
Step 5/9 : RUN ln -s /usr/local/java/jdk1.8.0_141 /usr/local/java/jdk
 ---> Using cache
 ---> 20584e92e50a
Step 6/9 : ENV JAVA_HOME /usr/local/java/jdk
 ---> Using cache
 ---> b6d56c39e5ee
Step 7/9 : ENV JRE_HOME ${JAVA_HOME}/jre
 ---> Running in 4cc40fcbe10a
Removing intermediate container 4cc40fcbe10a
 ---> a6a143d80288
Step 8/9 : ENV CLASSPATH .:${JAVA_HOME}/lib:${JRE_HOME}/lib
 ---> Running in bfed9c2a0dda
Removing intermediate container bfed9c2a0dda
 ---> 09857b782c6a
Step 9/9 : ENV PATH ${JAVA_HOME}/bin:$PATH
 ---> Running in 7af9e279bf54
Removing intermediate container 7af9e279bf54
 ---> cd58a704c13e
Successfully built cd58a704c13e
Successfully tagged centos-jdk:latest
----

.查看构建的新镜像
----
[root@master centos-jdk]# docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
centos-jdk               latest              cd58a704c13e        22 seconds ago      596MB
----

.使用新构建的镜像运行容器验证JDK是否安装成功
----
[root@master centos-jdk]# docker run -it centos-jdk /bin/bash
[root@1a6a7403b262 /]# java -version
java version "1.8.0_141"
Java(TM) SE Runtime Environment (build 1.8.0_141-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)
----

可以发现JDK已经安装成功了，至此，使用Dokcerfile构建镜像已完成

