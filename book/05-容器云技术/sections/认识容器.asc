=== Docker容器

==== 容器的简介

容器化是软件开发的一种方法，通过该方法可将应用程序或服务、其依赖项及其配置（抽象化为部署清单文件）一起打包为容器映像。 容器化应用程序可以作为一个单元进行测试，并可以作为容器映像实例部署到主机操作系统 (OS)。
就像船只、火车或卡车运输集装箱而不论其内部的货物一样，软件容器充当软件部署的标准单元，其中可以包含不同的代码和依赖项。 按照这种方式容器化软件，开发人员和 IT 专业人员只需进行极少修改或不修改，即可将其部署到不同的环境。
容器还会在共享 OS 上将应用程序彼此隔离开。 容器化应用程序在容器主机上运行，而容器主机在 OS（Linux 或 Windows）上运行。 因此，容器的占用比虚拟机 (VM) 映像小得多。
每个容器可以运行整个 Web 应用或服务，所示。 在此示例中，Docker 主机是容器主机，而 App1、App2、Svc 1 和 Svc 2 是容器化应用程序或服务。

image::docker_01.png[]

容器化的另一个优势在于可伸缩性。 通过为短期任务创建新容器，可以快速扩大。 从应用程序的角度来看，实例化映像（创建容器）类似于实例化 服务或 Web 应用等进程。 但出于可靠性考虑，在多个主机服务器上运行同一映像的多个实例时，通常要使每个容器（映像实例）在不同容错域中的不同主机服务器或 VM 中运行。
总而言之，容器在整个应用程序生命周期工作流中提供以下优点：隔离性、可移植性、灵活性、可伸缩性和可控性。 最重要的优点是可在开发和运营之间提供隔离。

==== 认识Docker容器

Docker 是一种开源项目，用于将应用程序自动部署为可在云或本地运行的便携式独立容器。 Docker 也是一家公司，它与云、Linux 和 Windows 供应商（包括 Microsoft）协作，致力于推广和发展这项技术。

image::docker_02.png[]

.Docker的优势

1.更高效的利用系统资源

2.更快速的交付和部署

3.更高效的部署和扩容

4.更简单的管理

==== Docker容器的系统架构

Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。

Docker 容器通过 Docker 镜像来创建。

容器与镜像的关系类似于面向对象编程中的对象与类。

[cols="20,20", options="docker_01"] 
|===
|Docker |面向对象 


|容器
|对象

|镜像
|类

|===

[cols="15,20", options="docker_02"] 
|===
|术语 |解释 


|镜像(Images)
|Docker 镜像是用于创建 Docker 容器的模板

|容器(Container)
|容器是独立运行的一个或一组应用

|客户端(Client)
|Docker 客户端通过命令行或者其他工具使用 https://docs.docker.com/reference/api/docker_remote_api[Docker API] 与Docker的守护进程通信



|主机(Host)
|一个物理或者虚拟的机器用于执行 Docker 守护进程和容器

|仓库(Registry)
|Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。 https://hub.docker.com[Docker Hub] 提供了庞大的镜像集合供使用


|Docker Machine
|Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure

|===

Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。

一种服务器，它是一种称为守护进程并且长时间(后台)运行的程序。

REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。

一个有命令行界面 (CLI) 工具的客户端

image::docker_03.png[]